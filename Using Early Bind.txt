------------------------------------------------------------------------Early Binding-----------------------------------------------------------------------------------------------------------
Use Early Binding:
-Download NuGet Packages to your solution
-Browse for dynamics 365 and select 'Microsoft.CrmSdk.CoreTools'
-Open the folder by right clicking the project and select 'Open Folder in File Explorer'
-Go to bin > coretools
-You can see the CrmSvcUtil.exe inside the folder
-use cmd in the address bar of the folder to open the command prompt
-CrmSvcUtil.exe hit enter
-On your command prompt open paste the code below:

url = Discovery Web service URL in d365
CrmSvcUtil.exe /url:[instanceURL]/XRMServices/2011/Discovery.svc /out:C:\Users\User\Documents\EarlyBound\[FileName].cs /username:[username] /password:[password] /namespace:[namespace] /serviceContextName:[serviceContext]

Example:
--For All Entities
CrmSvcUtil.exe /url:https://org9fd542ea.crm5.dynamics.com/XRMServices/2011/Discovery.svc /out:C:\Users\User\Documents\EarlyBound\EarlyBound.cs /username:admin@CRM293873.onmicrosoft.com /password:uA04vfQT4X /namespace:earlybound /serviceContextName:svcContext

--For Selected Entities
CrmSvcUtil.exe /url:https://org9fd542ea.crm5.dynamics.com/XRMServices/2011/Discovery.svc /out:EarlyBoundFilter.cs /username:admin@CRM293873.onmicrosoft.com /password:uA04vfQT4X /namespace:earlybound /codewriterFilter:SvcUtilFilter.CodeWriterFilter,SvcUtilFilter

-Login with your credentials.
-Wait for at least 2-5mnts to generate a new cs file depends on the 'out' value
-Add the new cs file to your project
-Go to folder right click the generated file and select 'Copy as path'
-Go back to your Visual Studio and right click the project and add existing file
-Add the path you copy and select Add.

-Implement the name space 'using System.Linq;' to your program cs file


If error reproduce using XrmToolBox Early Bound Generator
-Open XrmToolBox
-Select tool Early Bound Generator
-Connect to your org
-Select the entities you only needed
-Change Service Context Name = svcContext
-Hit Create Entities
-Hit Create OptionSets
-Hit Create Actions
-You can access the generated file in below:
C:\Users\<User>\AppData\Roaming\MscrmTools\XrmToolBox\Settings\EBG
-Download NuGet Packages to your solution
-Browse for dynamics 365 and select 'Microsoft.CrmSdk.CoreTools'
-Open the folder by right clicking the project and select 'Open Folder in File Explorer'
-Go to bin > coretools
-Paste the 3 generated file
------------------------------------------------------------------------------Late Binding vs Early Binding----------------------------------------------------------------------------------------------
Late binding:
-No strongly typed class needed. You can work with generic "Entity" class.
-Prone to errors as you have to hardcode entity and attribute names.
-Suitable for short logic (Simple plugins and Workflows)

Early binding:
-Strongly typed classes should be generated every time you change the customizations.
-Easy to developers to work with. Intellisense support in Visual Studio.
-Suitable for Large programs and XRM Tooling Applications (Console Apps)

----------------------------------------------------------------------------Retrieving Multiple records from entity using query-----------------------------------------------------------------------------
Retrieve Multiple:
1.QueryExpression
2.Linq
3.Fetchxml

------------------------------------------------------------------------------Using LINQ query Early bind--------------------------------------------------------------------------------------------
//Early binding
eg.
    using (<serviceContextName> context = new <serviceContextName>(service))
       {
         var contact = from c in context.ContactSet
                       where c.FirstName == "Ericson"
                       select c;
       }
       
      
   Example:  
   using System.Linq; 
       using (svcContext context = new svcContext(service))
                        {
                            var query = from c in context.ContactSet
                                        join a in context.AccountSet on c.ParentCustomerId.Id equals a.AccountId
                                        where a.Name == "Trey Research"
                                        select c;

                            foreach (var contact in query.ToList().OrderBy(c => c.FirstName))
                            {
                                Console.WriteLine($"{contact.FirstName} {contact.LastName}");
                            }
                        }
                        
                       
