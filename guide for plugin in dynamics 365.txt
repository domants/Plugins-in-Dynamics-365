Creating a plugin:

-Open Microsoft Visual Studio
-Create new project
-Search for "class library(.net framework)" make sure it is C# not a Visual Basic then select on that and click Next.
-->Enter Project name
-->Tick "Place solution and project in the same directory"
-->Select ".Net Framework 4.7.1" for most compatibility. One of the most compatible frameworks right now.

-Make sure your class is in public access modifier to be able to read when registering the plugin.
-Install the assembly packages. 
-Go to. Tool > Nuget Package Manager > Manage Nuget Packages for Solution > click on Browse tab > Search for microsoft.crm then select for "Microsoft.CrmSdk.CoreAssemblies" then install it.

-Inerit the interface of 'IPlugin' to your class
-After you code create your custom code.
-Build solution by right clicking on the right pane of your solution then click build solution
-open XrmToolBox then open tool Plugin Registration or plugin registration tool
-Click on Register then select Register New Assembly then register your plugin
-Then select the assembly and click on "Register New Step"

------------------------------------------------------------------------Early Binding-----------------------------------------------------------------------------------------------------------
Use Early Binding:
-Download NuGet Packages to your solution
-Browse for dynamics 365 and select 'Microsoft.CrmSdk.CoreTools'
-Open the folder by right clicking the project and select 'Open Folder in File Explorer'
-Go to bin > coretools
-You can see the CrmSvcUtil.exe inside the folder
-use cmd in the address bar of the folder to open the command prompt
-CrmSvcUtil.exe hit enter
-On your command prompt open paste the code below:
CrmSvcUtil.exe /interactivelogin /out:EarlyBindingXrm.cs /serviceContextName:svcContext
-Login with your credentials.
-Wait for at least 2-5mnts to generate a new cs file depends on the 'out' value
-Add the new cs file to your project
-Go to folder right click the generated file and select 'Copy as path'
-Go back to your Visual Studio and right click the project and add existing file
-Add the path you copy and select Add.

------------------------------------------------------------------------------Late Binding vs Early Binding----------------------------------------------------------------------------------------------
Late binding:
-No strongly typed class needed. You can work with generic "Entity" class.
-Prone to errors as you have to hardcode entity and attribute names.
-Suitable for short logic (Simple plugins and Workflows)

Early binding:
-Strongly typed classes should be generated every time you change the customizations.
-Easy to developers to work with. Intellisense support in Visual Studio.
-Suitable for Large programs and XRM Tooling Applications (Console Apps)

----------------------------------------------------------------------------Retrieving Multiple records from entity using query-----------------------------------------------------------------------------
Retrieve Multiple:
1.QueryExpression
2.Linq
3.Fetchxml

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Notes:
Register New Step
Filtering Attribute -> Sets wheter the plugin were run

Under Event Pipeline Stage of Execution
PreValidation -> Essentially means that your plugins goona run before your entire form or record that your on is even validated. nothing is really happening but your plugin will run anyway.
PreOperation -> Plugin will run after the form is validated. Gonna run before any values are actually save into database.
PostOperation -> Plugin will run after all the values has been change into the database.
Asynchronous -> run like JS. It will not run immediately as the event occurs. It's not going to throw any error messages.
Synchronous -> will run immediately after you perform the operation.
